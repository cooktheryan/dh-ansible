apiVersion: scaffolder.backstage.io/v1beta3
kind: Template
metadata:
  name: go-web-template
  title: Go Service with ArgoCD and a Tekton Pipeline
  description: Create a Go app with ArgoCD and a Tekton Pipeline
  tags:
    - recommended
    - go
spec:
  owner: rhdh
  type: service
  parameters:
    - title: Provide Information for Application
      required:
        - component_id
      properties:
        component_id:
          title: Name
          type: string
          description: Unique name of the component
          default: my-go-app
          ui:field: EntityNamePicker
          maxLength: 14
        group_id:
          title: Group Id
          type: string
          default: redhat.janus
          description: Group Id of the component
          default: A cool go app
    - title: Provide Image Registry Information
      required:
        - image_host
        - image_tag
      properties:
        image_host:
          title: Image Host
          type: string
          description: Host for storing image
          default: image-registry.openshift-image-registry.svc:5000
        image_tag:
          title: Image Tag
          default: latest
          type: string
          description: Build Image tag
    - title: Application repository Information
      required:
        - repo
      properties:
        repo:
          title: Repository Location
          type: object
          properties:
            host:
              title: Repo Host
              type: string
              description: Your SCM host
              default: gitlab-gitlab.apps.cluster-vqghh.sandbox837.opentlc.com
              enum:
                - gitlab-gitlab.apps.cluster-vqghh.sandbox837.opentlc.com
            owner:
              title: Repo Owner
              type: string
              description: Your SCM host organization/group
              default: development
              enum:
                - development

  steps:
    - id: template
      name: Fetch Skeleton
      action: fetch:template
      input:
        url: ./skeleton
        values:
          namespace: ${{ parameters.component_id }}
          component_id: ${{ parameters.component_id }}
          githubOrg: ${{ parameters.githubOrg }}
          repoName: ${{ parameters.repoName }}
          owner: rhdh
          system: ${{ parameters.system }}
          applicationType: app
          description: ${{ parameters.description }}
          imageUrl: ${{ parameters.image_organization }}
          imageBuilder: s2i-go
          imageRepository: ${{ parameters.image_host }}
          port: 8080
          ci: ../../scaffolder-skeletons/tekton-skeleton/tekton

    - id: ciTemplate
      name: Generating the assets
      action: fetch:template
      input:
        url: ../../scaffolder-skeletons/tekton-skeleton/
        copyWithoutTemplating:
          - .github/workflows/
        values:
          namespace: ${{ parameters.component_id }}
          repoName: ${{ parameters.repoName }}
          component_id: ${{ parameters.component_id }}
          githubOrg: ${{ parameters.githubOrg }}
          imageRepository: ${{ parameters.image_host }}
          imageUrl: ${{ parameters.image_organization }}
          source-repo: ${{ parameters.repoName }}
          source-branch: master
          owner: ${{ parameters.owner }}
          system: ${{ parameters.system }}
          output-image: ${{ parameters.image_host }}/${{ parameters.image_organization }}/${{ parameters.component_id }}:${{ parameters.image_tag }}
          applicationType: api
          description: ${{ parameters.description }}
          imageBuilder: s2i-go
          port: 8080
          ci: ../../scaffolder-skeletons/tekton-skeleton/tekton

    - id: manifestTemplate
      name: Generating the assets
      action: fetch:template
      input:
        url: ./manifests
        copyWithoutTemplating:
          - .github/workflows/
        values:
          namespace: ${{ parameters.component_id }}
          component_id: ${{ parameters.component_id }}
          githubOrg: ${{ parameters.githubOrg }}
          repoName: ${{ parameters.repoName }}
          owner: ${{ parameters.owner }}
          system: ${{ parameters.system }}
          applicationType: api
          description: ${{ parameters.description }}
          imageBuilder: s2i-go
          imageRepository: ${{ parameters.image_host }}
          imageUrl: ${{ parameters.image_organization }}
          port: 8080
          ci: ../../scaffolder-skeletons/tekton-skeleton/tekton

    - id: publish
      name: Publish
      action: publish:gitlab
      input:
        repoUrl: https://${{ parameters.repo.host }}/${{ parameters.repo.owner }}/${{ parameters.component_id }}.git
        repoVisibility: public

    - id: register
      name: Register
      action: catalog:register
      input:
        repoContentsUrl: ${{ steps.publish.output.repoContentsUrl }}
        catalogInfoPath: "/catalog-info.yaml"

    - id: create-argocd-resources
      name: Create ArgoCD Resources
      action: argocd:create-resources
      input:
        appName: ${{ parameters.component_id }}-bootstrap
        argoInstance: main
        namespace: janus-argocd
        repoUrl: https://${{ parameters.repo.host }}/${{ parameters.repo.owner }}/${{ parameters.component_id }}.git
        path: 'argocd/'

  output:
    links:
      - title: Source Code Repository
        url: ${{ steps.publish.output.remoteUrl }}
      - title: Open Component in catalog
        icon: catalog
        entityRef: ${{ steps.register.output.entityRef }}
